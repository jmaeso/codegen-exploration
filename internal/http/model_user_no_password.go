/*
Users service API

A REST API for creating, listing and deleting users.

API version: 0.0.1
Contact: jmaeso@enti.cat
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package http

import (
	"encoding/json"
)

// UserNoPassword Main entity of the service
type UserNoPassword struct {
	// Unique identifier of the user.
	Id string `json:"id"`
	// first name of the user.
	FirstName *string `json:"firstName,omitempty"`
	// last name of the user.
	LastName *string `json:"lastName,omitempty"`
	// nick name of the user.
	NickName string `json:"nickName"`
	// email of the user.
	Email string `json:"email"`
	// country of the user.
	Country *string `json:"country,omitempty"`
}

// NewUserNoPassword instantiates a new UserNoPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserNoPassword(id string, nickName string, email string) *UserNoPassword {
	this := UserNoPassword{}
	this.Id = id
	this.NickName = nickName
	this.Email = email
	return &this
}

// NewUserNoPasswordWithDefaults instantiates a new UserNoPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNoPasswordWithDefaults() *UserNoPassword {
	this := UserNoPassword{}
	return &this
}

// GetId returns the Id field value
func (o *UserNoPassword) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserNoPassword) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserNoPassword) SetId(v string) {
	o.Id = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserNoPassword) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNoPassword) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserNoPassword) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserNoPassword) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserNoPassword) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNoPassword) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserNoPassword) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserNoPassword) SetLastName(v string) {
	o.LastName = &v
}

// GetNickName returns the NickName field value
func (o *UserNoPassword) GetNickName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NickName
}

// GetNickNameOk returns a tuple with the NickName field value
// and a boolean to check if the value has been set.
func (o *UserNoPassword) GetNickNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NickName, true
}

// SetNickName sets field value
func (o *UserNoPassword) SetNickName(v string) {
	o.NickName = v
}

// GetEmail returns the Email field value
func (o *UserNoPassword) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserNoPassword) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserNoPassword) SetEmail(v string) {
	o.Email = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserNoPassword) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNoPassword) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserNoPassword) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserNoPassword) SetCountry(v string) {
	o.Country = &v
}

func (o UserNoPassword) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if true {
		toSerialize["nickName"] = o.NickName
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableUserNoPassword struct {
	value *UserNoPassword
	isSet bool
}

func (v NullableUserNoPassword) Get() *UserNoPassword {
	return v.value
}

func (v *NullableUserNoPassword) Set(val *UserNoPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableUserNoPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableUserNoPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserNoPassword(val *UserNoPassword) *NullableUserNoPassword {
	return &NullableUserNoPassword{value: val, isSet: true}
}

func (v NullableUserNoPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserNoPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


